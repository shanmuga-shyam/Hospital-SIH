// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hospitals {
    id String @id @default(uuid())
    name String
    location String
    contact String
    email String @unique
    password String
    type HospitalType
    city String
    state String
    doctors Doctors[]
    departments Departments[]
    beds Bed[]
    wards Ward[]
    opdqueue OPDQueue[]
    admission Admission[]
    inventory Inventory[]
    patient PatientInstance[]
}

model OTPVerification{
    id String @id @default(uuid())
    email String @unique
    otp String
    createdAt DateTime @default(now())
    expiresAt DateTime
}


enum HospitalType {
  Private
  Government
}

model Doctors {
    id String @id @default(uuid())
    name String
    contact String
    email String
    password String
    active Boolean
    departmentId String
    department Departments @relation(fields: [departmentId], references: [id])
    hospitalId String
    hospital Hospitals @relation(fields: [hospitalId], references: [id])
    opdQueue OPDQueue[]
    admissions Admission[]
    patientInstances PatientInstance[]
}

model Departments {
  id String @id @default(uuid())
  name String
  headOfDepartmentId String @default(" ")
  hospitalId String
  hospital Hospitals @relation(fields: [hospitalId], references: [id])
  doctors Doctors[]
  wards Ward[]
}

model OPDQueue {
  id String @id @default(uuid())
  patientInstanceId String
  patientInstance PatientInstance @relation(fields: [patientInstanceId], references: [id])
  doctorId String
  doctor Doctors @relation(fields: [doctorId], references: [id])
  status QueueStatus
  queueNumber Int
  timeStamp DateTime @default(now())
  hospitalId String
  hospital Hospitals @relation(fields: [hospitalId], references: [id])
}

enum QueueStatus {
  Pending
  Inprogress
  Completed
}

model Bed {
  id String @id @default(uuid())
  bedNumber String
  wardId String
  ward Ward @relation(fields: [wardId], references: [id])
  status BedStatus
  admissionDate DateTime
  dischargeDate DateTime
  hospitalId String
  hospital Hospitals @relation(fields: [hospitalId], references: [id])
  admissions Admission[]
  patient PatientInstance[]
}

enum BedStatus {
  Available
  Occupied
  Under_Maintainence
}

model Ward {
  id String @id @default(uuid())
  name String
  departmentId String
  department Departments @relation(fields: [departmentId], references: [id])
  totalBeds Int
  availableBeds Int
  hospitalId String
  hospital Hospitals @relation(fields: [hospitalId], references: [id])
  beds Bed[]
  admissions Admission[]
  patient PatientInstance[]
}

model PermanentRecord {
  id String @id @default(uuid())
  name String
  contact String
  address String
  medicalRecords MedicalRecord[]
  patientInstances PatientInstance[]
}

model MedicalRecord {
  id String @id @default(uuid())
  permanentRecordId String
  permanentRecord PermanentRecord @relation(fields: [permanentRecordId], references: [id])
  lastHospitalVisit String
  visitReason String
  allergies String
  importantConditions String
}

model PatientInstance {
  id String @id @default(uuid())
  permanentRecordId String
  permanentRecord PermanentRecord @relation(fields: [permanentRecordId], references: [id])
  hospitalId String
  hospital Hospitals @relation(fields: [hospitalId], references: [id])
  doctorId String
  doctor Doctors @relation(fields: [doctorId], references: [id])
  wardId String?
  ward Ward? @relation(fields: [wardId], references: [id])
  bedId String?
  bed Bed? @relation(fields: [bedId], references: [id])
  queueNumber Int
  emergencyStatus Boolean
  medications Json
  feedback String
  visitType VisitType
  opqueue OPDQueue[]
  admission Admission[]
}

enum VisitType {
  FreshVisit
  Revisit
}

model Admission {
  id String @id @default(uuid())
  patientInstanceId String
  patientInstance PatientInstance @relation(fields: [patientInstanceId], references: [id])
  hospitalId String
  hospital Hospitals @relation(fields: [hospitalId], references: [id])
  wardId String
  ward Ward @relation(fields: [wardId], references: [id])
  bedId String
  bed Bed @relation(fields: [bedId], references: [id])
  doctorId String
  doctor Doctors @relation(fields: [doctorId], references: [id])
}

model Inventory {
  id String @id @default(uuid())
  itemName String
  category InventoryCategory
  quantity Int
  price Float
  reorderLevel Int
  lastOrderDate DateTime @default(now())
  stockBatches Json[] 
  hospitalId String
  hospital Hospitals @relation(fields: [hospitalId], references: [id])
}

enum InventoryCategory {
  Medicine
  Surgical_Tools
  Others
}
